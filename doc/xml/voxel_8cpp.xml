<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="voxel_8cpp" kind="file" language="C++">
    <compoundname>voxel.cpp</compoundname>
    <includes refid="voxel_8h" local="yes">voxel.h</includes>
    <includes refid="constants_8h" local="yes">constants.h</includes>
    <includes local="no">Eigen/Dense</includes>
    <incdepgraph>
      <node id="985">
        <label>limits</label>
      </node>
      <node id="976">
        <label>collision.h</label>
        <link refid="collision_8h_source"/>
        <childnode refid="975" relation="include">
        </childnode>
      </node>
      <node id="973">
        <label>src/voxel.cpp</label>
        <link refid="voxel_8cpp"/>
        <childnode refid="974" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
      <node id="974">
        <label>voxel.h</label>
        <link refid="voxel_8h_source"/>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="975">
        <label>Eigen/Core</label>
      </node>
      <node id="984">
        <label>string</label>
      </node>
      <node id="982">
        <label>constants.h</label>
        <link refid="constants_8h_source"/>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
      </node>
      <node id="986">
        <label>Eigen/Dense</label>
      </node>
      <node id="978">
        <label>vector</label>
      </node>
      <node id="977">
        <label>walker.h</label>
        <link refid="walker_8h_source"/>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>collisionsphere.h</label>
        <link refid="collisionsphere_8h_source"/>
        <childnode refid="978" relation="include">
        </childnode>
      </node>
      <node id="981">
        <label>iostream</label>
      </node>
      <node id="979">
        <label>deque</label>
      </node>
      <node id="983">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;voxel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">Voxel::Voxel()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">Voxel::Voxel(Eigen::Vector3d<sp/>min_limits_,<sp/>Eigen::Vector3d<sp/>max_limits_):min_limits(min_limits_),max_limits(max_limits_)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Cube<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>a<sp/>=<sp/>min_limits;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>b<sp/>=<sp/>a;<sp/>b[0]<sp/>=<sp/>max_limits[0];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>c<sp/>=<sp/>b;<sp/>c[1]<sp/>=<sp/>max_limits[1];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>d<sp/>=<sp/>c;<sp/>d[0]<sp/>=<sp/>min_limits[0];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>e<sp/>=<sp/>a;<sp/>e[2]<sp/>=<sp/>max_limits[2];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>f<sp/>=<sp/>b;<sp/>f[2]<sp/>=<sp/>max_limits[2];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>g<sp/>=<sp/>c;<sp/>g[2]<sp/>=<sp/>max_limits[2];</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>h<sp/>=<sp/>d;<sp/>h[2]<sp/>=<sp/>max_limits[2];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[0]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(a,b,c,d);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[1]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(b,f,g,c);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[2]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(e,f,g,h);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[3]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(a,e,h,d);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[4]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(a,b,f,e);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>walls[5]<sp/>=<sp/><ref refid="class_plane" kindref="compound">Plane</ref>(d,c,g,h);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Voxel::CheckCollision(<ref refid="class_walker" kindref="compound">Walker</ref><sp/>&amp;walker,<sp/>Eigen::Vector3d&amp;<sp/>step,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>tmax,<sp/><ref refid="class_collision" kindref="compound">Collision</ref><sp/>&amp;colision)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_collision" kindref="compound">Collision</ref><sp/>colision_temp<sp/>=<sp/>colision;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walls[i].CheckCollision(walker,step,tmax,colision_temp);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(colision_temp.<ref refid="class_collision_1aedabfa9b114e4201343963df5698f7ef" kindref="member">doIHaveMorePiorityThan</ref>(colision))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colision<sp/>=<sp/>colision_temp;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colision.<ref refid="class_collision_1a384809577e353e0905047beac856015b" kindref="member">type</ref><sp/>!=<sp/>Collision::null;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">Plane::Plane(Eigen::Vector3d<sp/>normal_,<sp/>Eigen::Vector3d<sp/>plane_center_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_):normal(normal_),plane_center(plane_center_),d(d_)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">Plane::Plane(Eigen::Vector3d&amp;<sp/>a,<sp/>Eigen::Vector3d&amp;<sp/>b,<sp/>Eigen::Vector3d&amp;<sp/>c,<sp/>Eigen::Vector3d&amp;<sp/>d_)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>(b-a).cross(c-a);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.normalize();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>plane_center<sp/>=<sp/>(a+b+c+d_)/4.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>normal.dot(a);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Plane::CheckCollision(<ref refid="class_walker" kindref="compound">Walker</ref><sp/>&amp;walker,<sp/>Eigen::Vector3d&amp;<sp/>step,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmax,<sp/><ref refid="class_collision" kindref="compound">Collision</ref>&amp;<sp/>colision)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1a384809577e353e0905047beac856015b" kindref="member">type</ref><sp/>=<sp/>Collision::null;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(d<sp/>-<sp/>normal.dot(walker.<ref refid="class_walker_1a2c1bf5a8da9e8f3a230a22ab4ae0e373" kindref="member">pos_v</ref>))/(normal.dot(step));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(walker.<ref refid="class_walker_1afa37629b74387435a0bb02e0c061a718" kindref="member">status</ref><sp/>==<sp/>Walker::on_voxel){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>&lt;<sp/>EPS_VAL<sp/>||<sp/>t<sp/><sp/>&gt;<sp/>tmax)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>&lt;<sp/>0.0<sp/>||<sp/>t<sp/>&gt;<sp/><sp/>tmax)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1a384809577e353e0905047beac856015b" kindref="member">type</ref><sp/>=<sp/>Collision::hit;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1a195d201b0843d9f7190ac3a27761b4e7" kindref="member">t</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1aee20b80597eeea9b0c5a3ff0a5d0c81c" kindref="member">bounced_direction</ref><sp/>=<sp/>step;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1ae35c71ff91ffc9c253a345f0b4e2fbba" kindref="member">col_location</ref><sp/>=<sp/>Collision::voxel;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>colision.<ref refid="class_collision_1a00d821761200316e1d54eace02c725b4" kindref="member">colision_point</ref><sp/>=<sp/>walker.<ref refid="class_walker_1a2c1bf5a8da9e8f3a230a22ab4ae0e373" kindref="member">pos_v</ref><sp/>+<sp/>t*step;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/voxel.cpp"/>
  </compounddef>
</doxygen>
