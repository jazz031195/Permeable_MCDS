<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_p_l_y_obstacle" kind="class" language="C++" prot="public">
    <compoundname>PLYObstacle</compoundname>
    <basecompoundref refid="class_obstacle" prot="public" virt="non-virtual">Obstacle</basecompoundref>
    <includes refid="plyobstacle_8h" local="no">plyobstacle.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_p_l_y_obstacle_1a5e14e62690601a6273147aca53751569" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned PLYObstacle::vert_number</definition>
        <argsstring></argsstring>
        <name>vert_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="24" column="1" bodyfile="src/plyobstacle.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1a9664285e5921c10b8d05954849f23e8d" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned PLYObstacle::face_number</definition>
        <argsstring></argsstring>
        <name>face_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="25" column="1" bodyfile="src/plyobstacle.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1ab384ad44fb6165d7d7277157e774ba40" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string PLYObstacle::file_path</definition>
        <argsstring></argsstring>
        <name>file_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="26" column="1" bodyfile="src/plyobstacle.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1a59d10b1c902e053caaf905e81bb618a6" prot="public" static="no" mutable="no">
        <type><ref refid="class_vertex" kindref="compound">Vertex</ref> *</type>
        <definition>Vertex* PLYObstacle::vertices</definition>
        <argsstring></argsstring>
        <name>vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="27" column="1" bodyfile="src/plyobstacle.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1acd5752df4a98fbe92382184d732ddbc9" prot="public" static="no" mutable="no">
        <type><ref refid="class_triangle" kindref="compound">Triangle</ref> *</type>
        <definition>Triangle* PLYObstacle::faces</definition>
        <argsstring></argsstring>
        <name>faces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="28" column="1" bodyfile="src/plyobstacle.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1a3ddffa50af76259975a4b8d13c1019da" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double PLYObstacle::scale_factor</definition>
        <argsstring></argsstring>
        <name>scale_factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="29" column="1" bodyfile="src/plyobstacle.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_p_l_y_obstacle_1acf5a992f0da5e81dddf32484e24956ac" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int PLYObstacle::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="30" column="1" bodyfile="src/plyobstacle.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_p_l_y_obstacle_1afa108eef1e3030ee0aa8ed6978740b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PLYObstacle::PLYObstacle</definition>
        <argsstring>()</argsstring>
        <name>PLYObstacle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="32" column="1" bodyfile="src/plyobstacle.cpp" bodystart="9" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1a8995508a44982787e9aa44bc8d47f669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PLYObstacle::PLYObstacle</definition>
        <argsstring>(std::string path, double scale_factor_=1)</argsstring>
        <name>PLYObstacle</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_factor_</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1a52649eb1362242e7681e75f7409ee940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PLYObstacle::PLYObstacle</definition>
        <argsstring>(std::string path, std::vector&lt; Eigen::Vector3d &gt; &amp;centers, double max_distance=INFINITY, double scale_factor_=1)</argsstring>
        <name>PLYObstacle</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>centers</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_distance</declname>
          <defval>INFINITY</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale_factor_</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1a4e409be3ded2cb3fe2f3cae97fafd266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::readPLY_ASCII_triangleFan</definition>
        <argsstring>(std::string ply_file)</argsstring>
        <name>readPLY_ASCII_triangleFan</name>
        <param>
          <type>std::string</type>
          <declname>ply_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1af5db9263d9555682f8345cef2d116eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::readPLY_ASCII_triangles</definition>
        <argsstring>(std::string ply_file)</argsstring>
        <name>readPLY_ASCII_triangles</name>
        <param>
          <type>std::string</type>
          <declname>ply_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="38" column="1" bodyfile="src/plyobstacle.cpp" bodystart="48" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1a428018f72231740be297c9cd24752bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::readPLY_ASCII_trianglesSubdivitionDistance</definition>
        <argsstring>(std::string ply_file, std::vector&lt; Eigen::Vector3d &gt; &amp;centers, double max_distance)</argsstring>
        <name>readPLY_ASCII_trianglesSubdivitionDistance</name>
        <param>
          <type>std::string</type>
          <declname>ply_file</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>centers</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="39" column="1" bodyfile="src/plyobstacle.cpp" bodystart="106" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1ad0ce0257b8250a5e325da3f0d58e90de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::setScaleFactor</definition>
        <argsstring>(double scale)</argsstring>
        <name>setScaleFactor</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="41" column="1" bodyfile="src/plyobstacle.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1aa43eb5a352acb2305b0ad5d4f3535dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PLYObstacle::checkCollision</definition>
        <argsstring>(Walker &amp;walker, Eigen::Vector3d &amp;step, double &amp;step_lenght, Collision &amp;colision)</argsstring>
        <name>checkCollision</name>
        <param>
          <type><ref refid="class_walker" kindref="compound">Walker</ref> &amp;</type>
          <declname>walker</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>step_lenght</declname>
        </param>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="44" column="1" bodyfile="src/plyobstacle.cpp" bodystart="189" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1ada5a479826a277b78f7531693809e69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PLYObstacle::checkCollision</definition>
        <argsstring>(Walker &amp;walker, Eigen::Vector3d &amp;step, double &amp;step_lenght, Collision &amp;colision, std::vector&lt; unsigned &gt; &amp;triangle_list, unsigned list_end)</argsstring>
        <name>checkCollision</name>
        <param>
          <type><ref refid="class_walker" kindref="compound">Walker</ref> &amp;</type>
          <declname>walker</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>step_lenght</declname>
        </param>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned &gt; &amp;</type>
          <declname>triangle_list</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>list_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="46" column="1" bodyfile="src/plyobstacle.cpp" bodystart="222" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1aef64d5d9c5ea9d16c0efb75b89dc7ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PLYObstacle::minDistance</definition>
        <argsstring>(Walker &amp;w, unsigned t)</argsstring>
        <name>minDistance</name>
        <param>
          <type><ref refid="class_walker" kindref="compound">Walker</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="48" column="1" bodyfile="src/plyobstacle.cpp" bodystart="367" bodyend="370"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_p_l_y_obstacle_1a03d1dca220fa98011481157e3e066963" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::handleCollisions</definition>
        <argsstring>(Collision &amp;colision_confirmed, Collision &amp;colision_2, double &amp;max_distance, Eigen::Vector3d &amp;end_point, const unsigned triangle_indx)</argsstring>
        <name>handleCollisions</name>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision_confirmed</declname>
        </param>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision_2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_distance</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>end_point</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>triangle_indx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="53" column="1" bodyfile="src/plyobstacle.cpp" bodystart="255" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1ac65f2b3dc59fe5624ca7413cf3750008" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PLYObstacle::checkIfItsNearToTriangle</definition>
        <argsstring>(const Eigen::Vector3d end_point, const unsigned triangle_ind, Collision &amp;colision)</argsstring>
        <name>checkIfItsNearToTriangle</name>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>end_point</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>triangle_ind</declname>
        </param>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="56" column="1" bodyfile="src/plyobstacle.cpp" bodystart="308" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_p_l_y_obstacle_1a36c6b22d1bb426a63ca2567432d66ad1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PLYObstacle::updateWalkerStatusAndHandleBouncing</definition>
        <argsstring>(Walker &amp;walker, Eigen::Vector3d &amp;ray_origin, Eigen::Vector3d &amp;step, Collision &amp;colision)</argsstring>
        <name>updateWalkerStatusAndHandleBouncing</name>
        <param>
          <type><ref refid="class_walker" kindref="compound">Walker</ref> &amp;</type>
          <declname>walker</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>ray_origin</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type><ref refid="class_collision" kindref="compound">Collision</ref> &amp;</type>
          <declname>colision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/plyobstacle.h" line="59" column="1" bodyfile="src/plyobstacle.cpp" bodystart="325" bodyend="365"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PlyObstacle Derived Class ====================================================================/. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="class_p_l_y_obstacle" kindref="compound">PLYObstacle</ref> derived class. Implements obstacles loaded from pre-defined PY meshes. <simplesect kind="author"><para>Jonathan Rafael </para></simplesect>
<simplesect kind="date"><para>November 2016 <heading level="1">0.2 </heading>
</para></simplesect>
</para><para>Implements obstacles loaded from pre-constructed PLY meshes. The PLY format should be without any other experiment. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="68">
        <label>PLYObstacle</label>
        <link refid="class_p_l_y_obstacle"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="69">
        <label>Obstacle</label>
        <link refid="class_obstacle"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="72">
        <label>Triangle</label>
        <link refid="class_triangle"/>
        <childnode refid="73" relation="usage">
          <edgelabel>vertices</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>Vertex</label>
        <link refid="class_vertex"/>
      </node>
      <node id="70">
        <label>PLYObstacle</label>
        <link refid="class_p_l_y_obstacle"/>
        <childnode refid="71" relation="public-inheritance">
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>faces</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>vertices</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>Obstacle</label>
        <link refid="class_obstacle"/>
      </node>
    </collaborationgraph>
    <location file="src/plyobstacle.h" line="21" column="1" bodyfile="src/plyobstacle.h" bodystart="20" bodyend="61"/>
    <listofallmembers>
      <member refid="class_p_l_y_obstacle_1aa43eb5a352acb2305b0ad5d4f3535dd1" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>checkCollision</name></member>
      <member refid="class_p_l_y_obstacle_1ada5a479826a277b78f7531693809e69c" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>checkCollision</name></member>
      <member refid="class_obstacle_1af11af63f11595304ff6d5c1785c03da5" prot="public" virt="non-virtual" ambiguityscope="Obstacle::"><scope>PLYObstacle</scope><name>checkCollision</name></member>
      <member refid="class_p_l_y_obstacle_1ac65f2b3dc59fe5624ca7413cf3750008" prot="private" virt="non-virtual"><scope>PLYObstacle</scope><name>checkIfItsNearToTriangle</name></member>
      <member refid="class_obstacle_1aaa096d441fd095c7bbe924d1a78a8e23" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>count_perc_crossings</name></member>
      <member refid="class_obstacle_1a5316aabce6765c943d131aa3d5018f8d" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>elasticBounceAgainsPlane</name></member>
      <member refid="class_p_l_y_obstacle_1a9664285e5921c10b8d05954849f23e8d" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>face_number</name></member>
      <member refid="class_p_l_y_obstacle_1acd5752df4a98fbe92382184d732ddbc9" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>faces</name></member>
      <member refid="class_p_l_y_obstacle_1ab384ad44fb6165d7d7277157e774ba40" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>file_path</name></member>
      <member refid="class_p_l_y_obstacle_1a03d1dca220fa98011481157e3e066963" prot="private" virt="non-virtual"><scope>PLYObstacle</scope><name>handleCollisions</name></member>
      <member refid="class_p_l_y_obstacle_1acf5a992f0da5e81dddf32484e24956ac" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>id</name></member>
      <member refid="class_p_l_y_obstacle_1aef64d5d9c5ea9d16c0efb75b89dc7ba0" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>minDistance</name></member>
      <member refid="class_obstacle_1a742e9d6ea940b33545cef4f1f2d58566" prot="public" virt="non-virtual" ambiguityscope="Obstacle::"><scope>PLYObstacle</scope><name>minDistance</name></member>
      <member refid="class_obstacle_1a8f734072321fa06a7b7dae2d5f50f352" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>Obstacle</name></member>
      <member refid="class_obstacle_1a7afe63ee05b482c526591c981b22cf54" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>percolation</name></member>
      <member refid="class_p_l_y_obstacle_1afa108eef1e3030ee0aa8ed6978740b13" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>PLYObstacle</name></member>
      <member refid="class_p_l_y_obstacle_1a8995508a44982787e9aa44bc8d47f669" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>PLYObstacle</name></member>
      <member refid="class_p_l_y_obstacle_1a52649eb1362242e7681e75f7409ee940" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>PLYObstacle</name></member>
      <member refid="class_p_l_y_obstacle_1a4e409be3ded2cb3fe2f3cae97fafd266" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>readPLY_ASCII_triangleFan</name></member>
      <member refid="class_p_l_y_obstacle_1af5db9263d9555682f8345cef2d116eb4" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>readPLY_ASCII_triangles</name></member>
      <member refid="class_p_l_y_obstacle_1a428018f72231740be297c9cd24752bbd" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>readPLY_ASCII_trianglesSubdivitionDistance</name></member>
      <member refid="class_p_l_y_obstacle_1a3ddffa50af76259975a4b8d13c1019da" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>scale_factor</name></member>
      <member refid="class_p_l_y_obstacle_1ad0ce0257b8250a5e325da3f0d58e90de" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>setScaleFactor</name></member>
      <member refid="class_obstacle_1a374f9b4486f63abce9696f5fe3a13e8e" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>T2</name></member>
      <member refid="class_p_l_y_obstacle_1a36c6b22d1bb426a63ca2567432d66ad1" prot="private" virt="non-virtual"><scope>PLYObstacle</scope><name>updateWalkerStatusAndHandleBouncing</name></member>
      <member refid="class_p_l_y_obstacle_1a5e14e62690601a6273147aca53751569" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>vert_number</name></member>
      <member refid="class_p_l_y_obstacle_1a59d10b1c902e053caaf905e81bb618a6" prot="public" virt="non-virtual"><scope>PLYObstacle</scope><name>vertices</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
